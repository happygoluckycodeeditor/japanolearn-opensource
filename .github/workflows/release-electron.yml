name: Release Electron App

on:
  push:
    tags:
      - 'v*.*.*' # Triggers on version tags like v1.0.0
  workflow_dispatch:

permissions:
  contents: write # This grants write access to repository contents including releases

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      # macOS Code Signing Setup
      - name: Setup macOS Code Signing
        if: runner.os == 'macOS'
        run: |
          echo "${{ secrets.MACOS_CERTIFICATE }}" | base64 --decode > certificate.p12
          security create-keychain -p actions build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p actions build.keychain
          security import certificate.p12 -k build.keychain -P "${{ secrets.MACOS_CERTIFICATE_PWD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k actions build.keychain
          rm certificate.p12
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}

      - name: Build app
        run: npm run build

      # Package and publish to GitHub releases for auto-updater
      - name: Package and Publish Electron app
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            npm run build:win:publish
          elif [ "${{ runner.os }}" == "macOS" ]; then
            # Set identity for code signing in CI
            export CSC_IDENTITY_AUTO_DISCOVERY=false
            export CSC_NAME="Tanmay Sandeep Bagwe (FG934KHYV5)"
            npm run build:mac:publish
          else
            npm run build:linux:publish
          fi
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Manual notarization step for macOS
      - name: Notarize macOS app
        if: runner.os == 'macOS'
        run: |
          # Find the app bundle (before DMG creation)
          APP_FILE=$(find dist/mac-universal -name "*.app" | head -1)
          echo "Found app bundle: $APP_FILE"
          
          # Create ZIP for notarization (Apple recommends ZIP over DMG)
          ZIP_FILE="dist/JapanoLearn-notarization.zip"
          echo "Creating ZIP for notarization..."
          /usr/bin/ditto -c -k --keepParent "$APP_FILE" "$ZIP_FILE"
          
          # Submit for notarization with timeout using gtimeout (GNU timeout on macOS)
          echo "Submitting for notarization..."
          gtimeout 1800 xcrun notarytool submit "$ZIP_FILE" \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
            --team-id "${{ secrets.APPLE_TEAM_ID }}" \
            --wait || {
            echo "Notarization timed out or failed, but continuing..."
            echo "You can check status later with the submission ID"
            exit 0
          }
          
          # If successful, staple the ticket to the app
          echo "Stapling notarization ticket to app..."
          xcrun stapler staple "$APP_FILE"
          
          # Also staple to DMG if it exists
          DMG_FILE=$(find dist -name "*.dmg" | head -1)
          if [ -n "$DMG_FILE" ]; then
            echo "Stapling notarization ticket to DMG..."
            xcrun stapler staple "$DMG_FILE"
          fi
          
          echo "Notarization process complete!"
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      # Upload artifacts for manual download
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-build-${{ matrix.os }}
          path: |
            dist/*.exe
            dist/*.msi
            dist/*.dmg
            dist/*.pkg
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.snap
            dist/*.zip
            dist/*.tar.gz
            dist/*latest*.yml
            dist/*latest*.json

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
